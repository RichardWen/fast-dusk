doctype html
//
  Epilogue by TEMPLATED
  templated.co @templatedco
  Released for free under the Creative Commons Attribution 3.0 license (templated.co/license)
html
  head
    title Project Mood
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='assets/css/main.css')
  body
    // Header
    header#header.alt
      .inner
        h1 Project Mood
        p
          | A webapp that will pick the perfect music for your mood
    // Wrapper
    #wrapper
      // Banner
      section#intro.main
        span.icon.fa-music.major
        h2 Let me know what you're looking for
          h3 Joy
            input#joyRange(type='range', value='50')
          h3 Anger
            input#angerRange(type='range', value='50')
          h3 Sadness
            input#sadnessRange(type='range', value='50')
          h3 Disgust
            input#disgustRange(type='range', value='50')
          h3 Fear
            input#fearRange(type='range', value='50')
        ul.actions
          li
            a.button.big(href='#', id='Search') Search
            article.item
              header
                #player

      footer#footer
        p.copyright
          | Â© Untitled. Design:
          a(href='https://templated.co') TEMPLATED
          | . Images:
          a(href='https://unsplash.com') Unsplash
          | .
    // Scripts
    script(src='assets/js/jquery.min.js')
    script(src='assets/js/skel.min.js')
    script(src='assets/js/genSongs.js')
    script(src='assets/js/search.js')
    script(src='assets/js/util.js')
    script(src='assets/js/main.js')
    script.
            var SEARCH_QUERY_HERE = "donald trump";
            var player;
            var resVidId = "";
            function init(){
                gapi.client.setApiKey("AIzaSyAQdnRLXwWEQLrzSIiSVlA43xJiGCYjbKQ");
                gapi.client.load("youtube", "v3", function(){
                var request = gapi.client.youtube.search.list({
                part: "snippet",
                type: "video",
                q: encodeURIComponent(SEARCH_QUERY_HERE).replace(/%20/g, "+"),
                maxResults: 1,
                order: "viewCount"
                });
                request.execute(function(response){
                var results = response.result;
                $.each(results.items, function(index,item){
                resVidId=item.id.videoId;
                });
                });
                });
            }

            var searchButton = document.getElementById("Search");
            searchButton.addEventListener("click",function(){
            if(player){
              player.loadVideoById({'videoId': resVidId,
               'startSeconds': 5,
               'endSeconds': 60,
               'suggestedQuality': 'large'});
            }
            });
    script(src='https://apis.google.com/js/client.js?onload=init')
    script.
            // 2. This code loads the IFrame Player API code asynchronously.
            var tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

            // 3. This function creates an <iframe> (and YouTube player)
            //    after the API code downloads.
            function onYouTubeIframeAPIReady() {
             player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: '',
            events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
            }
            });
            }

            // 4. The API will call this function when the video player is ready.
            function onPlayerReady(event) {
            event.target.playVideo();
            }

             // 5. The API calls this function when the player's state changes.
            //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.
            var done = false;
            function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
            }
            }
            function stopVideo() {
            player.stopVideo();
            }
