doctype html
//
  Epilogue by TEMPLATED
  templated.co @templatedco
  Released for free under the Creative Commons Attribution 3.0 license (templated.co/license)
html
  head
    title Project Mood
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='assets/css/main.css')
  body
    // Header
    header#header.alt
      .inner
        h1 Project Mood
        p A webapp that will pick the perfect music for your mood
    // Wrapper
    #wrapper
      // Banner
      section#intro.main
        span.icon.fa-music.major
        h2
          | Let me know what you're looking for
          h3
            | Joy
            input#joyRange(type='range', value='50')
          h3
            | Anger
            input#angerRange(type='range', value='50')
          h3
            | Sadness
            input#sadnessRange(type='range', value='50')
          h3
            | Disgust
            input#disgustRange(type='range', value='50')
          h3
            | Fear
            input#fearRange(type='range', value='50')
        ul.actions
          li
            a.button.big#searchMoodMusic Search
        article.item
          header
            #player
          
        
      // CTA
      //section#cta.main.special
      //  h2 Etiam veroeros lorem
      //  p
       //   | Phasellus ac augue ac magna auctor tempus proin
        //  br
       //   |             accumsan lacus a nibh commodo in pellentesque dui
        //  br
        //  |             in hac habitasse platea dictumst.
       // ul.actions
         // li
           // a.button.big(href='#') Get Started
      // Main
      //
        <section id="main" class="main">
        <header>
        <h2>Lorem ipsum dolor</h2>
        </header>
        <p>Fusce malesuada efficitur venenatis. Pellentesque tempor leo sed massa hendrerit hendrerit. In sed feugiat est, eu congue elit. Ut porta magna vel felis sodales vulputate. Donec faucibus dapibus lacus non ornare. Etiam eget neque id metus gravida tristique ac quis erat. Aenean quis aliquet sem. Ut ut elementum sem. Suspendisse eleifend ut est non dapibus. Nulla porta, neque quis pretium sagittis, tortor lacus elementum metus, in imperdiet ante lorem vitae ipsum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Etiam eget neque id metus gravida tristique ac quis erat. Aenean quis aliquet sem. Ut ut elementum sem. Suspendisse eleifend ut est non dapibus. Nulla porta, neque quis pretium sagittis, tortor lacus elementum metus, in imperdiet ante lorem vitae ipsum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.</p>
        </section>
      // Footer
      footer#footer
        p.copyright
          | Â© Untitled. Design:
          a(href='https://templated.co') TEMPLATED
          | . Images:
          a(href='https://unsplash.com') Unsplash
          | .
    // Scripts
    script(src='assets/js/jquery.min.js')
    script(src='assets/js/skel.min.js')
    script(src='assets/js/util.js')
    script(src='assets/js/main.js')
    script.
            var player;
            var resVidId = "";
            function init(){
                
            }

            var searchButton = document.getElementById("searchMoodMusic");
            searchButton.addEventListener("click",function(){ 
            if(player){
                 
                var joyVal = document.getElementById("joyRange").value;
                var angerVal = document.getElementById("angerRange").value;
                var sadnessVal = document.getElementById("sadnessRange").value;
                var disgustVal = document.getElementById("disgustRange").value;
                var fearVal = document.getElementById("fearRange").value;
                var url = "/?anger=" + angerVal +"&disgust=" + disgustVal + "&fear=" + fearVal + "&joy=" + joyVal + "&sadness=" + sadnessVal;
                var bestsongs = $.getJSON('/searchsong' + url, function(data){
                var artistAndSong = data[0].artist+ " " + data[0].song;
                artistAndSong = artistAndSong.replace(/[.,\/#!$%\^&\*;:"'{}=\-_`~()]/g,"");
  

                gapi.client.setApiKey("AIzaSyAQdnRLXwWEQLrzSIiSVlA43xJiGCYjbKQ");
                gapi.client.load("youtube", "v3", function(){
                var request = gapi.client.youtube.search.list({
                part: "snippet",
                type: "video",
                q: artistAndSong,
                maxResults: 1,
                order: "viewCount"
                });
                request.execute(function(response){
                var results = response.result;
                $.each(results.items, function(index,item){
                resVidId=item.id.videoId;

                player.loadVideoById({'videoId': resVidId,
               'startSeconds': 5,
               'endSeconds': 60,
               'suggestedQuality': 'large'});

                });
                });
                });
                });

              
            }
            });
    script(src='https://apis.google.com/js/client.js?onload=init')
    script.
            // 2. This code loads the IFrame Player API code asynchronously.
            var tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

            // 3. This function creates an <iframe> (and YouTube player)
            //    after the API code downloads.
            function onYouTubeIframeAPIReady() {
             player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: '',
            events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
            }
            }); 
            }

            // 4. The API will call this function when the video player is ready.
            function onPlayerReady(event) {
            event.target.playVideo();
            }

             // 5. The API calls this function when the player's state changes.
            //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.
            var done = false;
            function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
            }
            }
            function stopVideo() {
            player.stopVideo();
            }




  